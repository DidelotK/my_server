---
########## DOCKER NODES CONFIGURATION ##########

- hosts: swarm_nodes
  remote_user: "{{ admin_user }}"
  become: yes
  roles:
    - role: pip

    - role: docker-daemon-certificate
      dds_host: "{{ ansible_host }}"
      dds_country: "FR"
      dds_state: "France"
      dds_locality: "Paris"
      dds_organization: "DidelotCorp"
      dds_client_cert_path: "{{ docker_tls_certs_path }}"

    - role: docker
      docker_users:
        - "{{ admin_user }}"
      docker_daemon_options:
        hosts:
          - "unix:///var/run/docker.sock"
          - "tcp://{{ ansible_host }}:2376"
        tlsverify: true
        tlscacert: "{{ dds_server_cert_path }}/ca.pem"
        tlscert: "{{ dds_server_cert_path }}/server-cert.pem"
        tlskey: "{{ dds_server_cert_path }}/server-key.pem"
  post_tasks:
    - name: Install docker compose.
      pip:
        name: docker-compose
        state: present

    - name: Determine swarm status.
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: Add manager to swarm operational group (if operational).
      add_host:
        hostname: "{{ ansible_hostname }}"
        groups: swarm_manager_operational
      when: "'active' in swarm_status.stdout_lines and 'managers' in group_names"

    - name: Add manager to swarm boostrap group (if not operational).
      add_host:
        hostname: "{{ ansible_hostname }}"
        groups: swarm_manager_bootstrap
      when: "'active' not in swarm_status.stdout_lines and 'managers' in group_names"

    - name: Add worker to swarm operational group (if operational).
      add_host:
        hostname: "{{ ansible_hostname }}"
        groups: swarm_worker_operational
      when: "'active' in swarm_status.stdout_lines and 'workers' in group_names"

    - name: Add worker to swarm boostrap group (if not operational).
      add_host:
        hostname: "{{ ansible_hostname }}"
        groups: swarm_worker_bootstrap
      when: "'active' not in swarm_status.stdout_lines and 'workers' in group_names"


- hosts: manager1
  remote_user: "{{ admin_user }}"
  become: yes
  tasks:
    - name: Initialize swarm cluster.
      shell: >
        docker swarm init
        --advertise-addr={{ ansible_host }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: Add initialized host to swarm_manager_operational group.
      add_host:
        hostname: "{{ ansible_hostname }}"
        groups: swarm_manager_operational
      when: bootstrap_first_node | changed

    - name: Retrieve swarm manager token.
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: Set swarm manager token fact.
      set_fact:
        swarm_manager_token: "{{ swarm_manager_token }}"

    - name: Retrieve swarm worker token.
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: Set swarm worker token fact.
      set_fact:
        swarm_manager_token: "{{ swarm_worker_token }}"

- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    manager_operational_ip: "hostvars['manager1']['ansible_host']"
    token: "{{ hostvars['manager1']['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: Join manager nodes to cluster.
      shell: >
        docker swarm join
        --advertise-addr={{ manager_operational_ip }}:2377
        --token={{ token }}
        {{ manager_operational_ip }}:2377


- hosts: swarm_worker_bootstrap
  become: true
  vars:
    manager_operational_ip: "hostvars['manager1']['ansible_host']"
    token: "{{ hostvars['manager1']['swarm_worker_token']['stdout'] }}"
  tasks:
    - debug:
        var: hostvars

    - name: Join worker nodes to cluster.
      shell: >
        docker swarm join
        --advertise-addr={{ manager_operational_ip }}:2377
        --token={{ token }}
        {{ manager_operational_ip }}:2377


- hosts: manager1
  remote_user: "{{ admin_user }}"
  become: yes
  vars:
    jenkins_master_docker_path: "/home/{{ admin_user }}/docker/managers/jenkins-master"
    jenkins_node_slave_docker_path: "/home/{{ admin_user }}/docker/managers/jenkins-node-slave"
    docker_list_to_add_certs:
      - "{{ jenkins_master_docker_path }}"
      - "{{ jenkins_node_slave_docker_path }}"
    certs_list:
      - ca.pem
      - cert.pem
      - key.pem
  tasks:
    - name: Copy docker to remote.
      copy:
        src: ../docker
        dest: "/home/{{ admin_user }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: 0644
        force: yes
      tags: docker_services

    - name: Copy certificates into folders of docker images that will use tcp to connect to host daemon.
      copy:
        src: "{{ docker_tls_certs_path }}/{{ item.1 }}"
        dest: "{{ item.0 }}/certs/{{ item.1 }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: 0644
        remote_src: yes
      with_nested:
        - "{{ docker_list_to_add_certs }}"
        - "{{ certs_list }}"
      tags: docker_services
