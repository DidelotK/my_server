---
########## DOCKER NODES CONFIGURATION ##########

- hosts: swarm_nodes
  remote_user: "{{ admin_user }}"
  roles:
    - role: pip
      become: yes

    - role: docker-daemon-certificate
      dds_host: "{{ ansible_host }}"
      dds_country: "FR"
      dds_state: "France"
      dds_locality: "Paris"
      dds_organization: "DidelotCorp"
      dds_client_cert_path: "{{ docker_tls_certs_path }}"

    - role: docker
      become: yes
      docker_users:
        - "{{ ansible_user }}"
      docker_daemon_options:
        hosts:
          - "unix:///var/run/docker.sock"
          - "tcp://{{ ansible_host }}:2376"
        tlsverify: true
        tlscacert: "{{ dds_server_cert_path }}/ca.pem"
        tlscert: "{{ dds_server_cert_path }}/server-cert.pem"
        tlskey: "{{ dds_server_cert_path }}/server-key.pem"
        insecure-registries:
          - "0.0.0.0:5000"

  post_tasks:
    - name: Install docker compose.
      become: yes
      pip:
        name: docker-compose
        state: present

########################################
# Docker Swarm configuration
# Inspired from: https://thisendout.com/2016/09/13/deploying-docker-swarm-with-ansible/
########################################
- hosts: managers
  remote_user: "{{ admin_user }}"
  tasks:
    - name: Determine swarm status.
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      changed_when: false
      register: swarm_status

    - name: Add manager to swarm operational group.
      group_by:
        key: "swarm_managers_{{ swarm_status.stdout }}"


- hosts: workers
  remote_user: "{{ admin_user }}"
  tasks:
    - name: Determine swarm status.
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      changed_when: false
      register: swarm_status

    - name: Add worker to swarm operational group (if operational).
      group_by:
        key: "swarm_workers_{{ swarm_status.stdout }}"


- hosts: swarm_managers_inactive[0]
  remote_user: "{{ admin_user }}"
  tasks:
    - name: Initialize swarm cluster.
      shell: >
        docker swarm init
        --advertise-addr {{ swarm_iface | default('eth0') }}
      when: "'swarm_workers_active' not in groups"
      register: bootstrap_first_node

    - name: Add initialized host to swarm_manager_active group.
      add_host:
        hostname: "{{ ansible_hostname }}"
        inventory_dir: "{{ inventory_dir }}"
        groups: swarm_managers_active
      when: bootstrap_first_node | changed


- hosts: swarm_managers_active[0]
  remote_user: "{{ admin_user }}"
  tasks:
    - name: Retrieve swarm manager token.
      command: docker swarm join-token -q manager
      changed_when: false
      register: swarm_manager_token

    - name: Retrieve swarm worker token.
      command: docker swarm join-token -q worker
      changed_when: false
      register: swarm_worker_token


- hosts: swarm_managers_inactive:!swarm_managers_active
  remote_user: "{{ admin_user }}"
  vars:
    manager_operational_ip: "{{ hostvars[groups['swarm_managers_active'][0]]['ansible_host'] }}"
    token: "{{ hostvars[groups['swarm_managers_active'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: Join manager nodes to cluster.
      shell: >
        docker swarm join
        --token={{ token }}
        {{ manager_operational_ip }}:2377


- hosts: swarm_workers_inactive
  remote_user: "{{ admin_user }}"
  vars:
    manager_ip: "{{ hostvars[groups['swarm_managers_active'][0]]['ansible_host'] }}"
    token: "{{ hostvars[groups['swarm_managers_active'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: Join worker nodes to cluster.
      shell: >
        docker swarm join
        --token={{ token }}
        {{ manager_ip }}:2377
