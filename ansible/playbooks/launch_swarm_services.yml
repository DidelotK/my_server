---
########################################
# Launch services on swarm
########################################
- hosts: localhost
  connection: local
  pre_tasks:
    - set_fact:
        node_ip: "{{ hostvars[item]['ansible_host'] }}"
      register: nodes_ips_result
      with_items: "{{ groups['swarm_nodes'] }}"

    - set_fact:
        nodes_ips: "{{ nodes_ips_result.results | map(attribute='ansible_facts.node_ip') | list }}"
  roles:
    - role: prometheus-configs-generator
      prometheus_path_to_generated_config: "../../docker/prometheus"
      prometheus_extra_scrape_configs:
        - job_name: 'cadvisor'
          scrape_interval: 5s
          dns_sd_configs:
            - names:
              - 'tasks.cadvisor'
              type: 'A'
              port: 8080
          static_configs:
            - targets: "{{ nodes_ips | map('regex_replace','(.*)','\\1:8080')| list }}"

        - job_name: 'node-exporter'
          scrape_interval: 5s
          dns_sd_configs:
            - names:
              - 'tasks.node-exporter'
              type: 'A'
              port: 9100
          static_configs:
            - targets: "{{ nodes_ips | map('regex_replace','(.*)','\\1:9100')| list }}"

- hosts: haproxys
  remote_user: "{{ admin_user }}"
  tasks:
    - name: Tag haproxy in docker swarm.
      shell: "docker node update --label-add haproxy=true {{ ansible_hostname }}"

- hosts: managers[0]
  remote_user: "{{ admin_user }}"
  tasks:

    - name: Copy docker to remote.
      copy:
        src: ../../docker
        dest: "/home/{{ ansible_user }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
        force: yes

    - name: Copy certs to remote.
      copy:
        src: ../../certs
        dest: "/home/{{ ansible_user }}/docker"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
        force: yes

    - name: Start swarm services.
      block:
        - name: Check if the registry service is already started
          shell: "docker service ls | grep registry"
          ignore_errors: yes
          changed_when: false
          register: registry_started

        - name: Start the registry as a service
          command: |
            docker service create \
              --name registry \
              -p 5000:5000  \
              -p 5000:5000/udp  \
              registry:2
          when: registry_started.stdout == ""

        - name: Build docker stack.
          shell: docker-compose build
          args:
              chdir: "/home/{{ ansible_user }}/docker"

        - name: Push docker stack.
          shell: docker-compose push
          args:
              chdir: "/home/{{ ansible_user }}/docker"

        - name: Deploy stack.
          shell: docker stack deploy -c docker-compose.yml docker_services
          args:
              chdir: "/home/{{ ansible_user }}/docker"
