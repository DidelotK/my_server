version: '3.6'

configs:
  prometheus_config:
    file: prometheus/prometheus.yml
  grafana_datasources_config:
    file: grafana/provisioning/datasources/all.yml
  grafana_dashboards_config:
    file: grafana/provisioning/dashboards/all.yml
  grafana_dashboard_prometheus_config:
    file: grafana/provisioning/dashboards/prometheus-stats_rev1.json
  grafana_dashboard_swarm_config:
    file: grafana/provisioning/dashboards/docker-swarm-monitor_rev1.json

secrets:
  GRAFANA_USER:
    external: true
  GRAFANA_PASSWORD:
    external: true

volumes:
  grafana_logs:
  grafana_data:
  prometheus_data:

networks:
  monitoring_network:
    driver: overlay
  ingress_network:
    external: true

services:
  grafana:
    image: 0.0.0.0:5000/grafana
    build: grafana
    configs:
      - source: grafana_datasources_config
        target: /etc/grafana/provisioning/datasources/all.yml

      - source: grafana_dashboards_config
        target: /etc/grafana/provisioning/dashboards/all.yml

      - source: grafana_dashboard_prometheus_config
        target: /etc/grafana/provisioning/dashboards/prometheus-stats_rev1.json

      - source: grafana_dashboard_swarm_config
        target: /etc/grafana/provisioning/dashboards/docker-swarm-monitor_rev1.json
    secrets:
      - GRAFANA_USER
      - GRAFANA_PASSWORD
    ports:
     - 3000:3000
#    volumes:
#      - grafana_logs:/var/log/grafana
#      - grafana_data:/var/lib/grafana
    networks:
      - monitoring_network
      - ingress_network
    deploy:
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:v2.0.0
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    depends_on:
      - cadvisor
    networks:
      - monitoring_network
      - ingress_network
    deploy:
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitoring_network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - monitoring_network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
